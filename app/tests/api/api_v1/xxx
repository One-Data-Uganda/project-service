from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app import crud
from app.core.config import settings
from app.schemas.user import UserCreate
from app.tests.utils.utils import random_phone_number
import pytest

from faker import Faker
fake = Faker()
Faker.seed(0)


def test_create_user_new_email(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.password()
    tel = random_phone_number()
    name = fake.name()
    data = {"email": email, "password": password, "name": name, "tel": tel}
    print(data)
    r = client.post(
        f"{settings.API_V1_STR}/user/", json=data,
    )
    assert 200 <= r.status_code < 300
    created_user = r.json()["data"]
    user = crud.user.get_by_email(db, email=email)
    assert user
    assert user.email == created_user["email"]


def test_get_existing_user(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.password()
    tel = random_phone_number()
    name = fake.name()
    user_in = UserCreate(name=name, email=email, password=password, tel=tel)
    user = crud.user.create(db, obj_in=user_in)
    user_id = user.id
    r = client.get(
        f"{settings.API_V1_STR}/user/{user_id}",
    )
    assert 200 <= r.status_code < 300
    api_user = r.json()["data"]
    existing_user = crud.user.get(db, id=user_id)
    assert existing_user
    assert existing_user.email == api_user["email"]
    assert existing_user.name == api_user["name"]

    r = client.get(
        f"{settings.API_V1_STR}/user/0",
    )
    assert r.status_code == 404
    assert r.json()["message"] == "Invalid user specified"


def test_retrieve_users(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.password()
    tel = random_phone_number()
    name = fake.name()
    user_in = UserCreate(name=name, email=email, password=password, tel=tel)
    crud.user.create(db, obj_in=user_in)

    email2 = fake.email()
    password2 = f'T!{fake.name()}'
    tel2 = random_phone_number()
    name2 = fake.name()
    user_in2 = UserCreate(name=name2, email=email2, password=password2, tel=tel2)
    crud.user.create(db, obj_in=user_in2)

    r = client.post(
        f"{settings.API_V1_STR}/user/list", json={}
    )
    rval = r.json()

    assert "data" in rval
    all_users = rval["data"]
    assert len(all_users) > 1
    for item in all_users:
        assert "email" in item


def test_check_password(
    client: TestClient, db: Session
) -> None:
    password = fake.password(special_chars=False)
    data = {"password": password}
    r = client.post(
        f"{settings.API_V1_STR}/user/check-password", json=data,
    )
    print(r.json())
    data = r.json()
    assert r.status_code == 400
    assert data["message"] == "Password not complex enough. Should be a minimum of 8 characters long, with one uppercase letter, one digit and one special character"

    password = fake.password()
    data = {"password": password}
    r = client.post(
        f"{settings.API_V1_STR}/user/check-password", json=data,
    )
    data = r.json()
    assert r.status_code == 200


def test_create_user_existing_email(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.password()
    tel = random_phone_number()
    name = fake.name()
    user_in = UserCreate(name=name, email=email, password=password, tel=tel)
    crud.user.create(db, obj_in=user_in)
    data = {"name": name, "email": email, "password": password, "tel": tel}
    r = client.post(
        f"{settings.API_V1_STR}/user/", json=data,
    )
    created_user = r.json()
    assert r.status_code == 400
    assert "data" not in created_user


_email = fake.email()
_name = fake.name()
_tel = random_phone_number()
_password = fake.password()

@pytest.mark.parametrize(
    "test_email, test_name, test_tel, test_password, status_code, expected_message",
    [
        (_email, _name, _tel, fake.name(), 422, "Password not complex enough. Should be a minimum of 8 characters long, with one uppercase letter, one digit and one special character"),
        (_email, _name, fake.name(), _password, 422, "The telephone number provided is invalid"),
    ]
)
def test_create_bad_params(
        test_email, test_name, test_tel, test_password, status_code, expected_message,
        client: TestClient, db: Session,
) -> None:
    r = client.post(
        f"{settings.API_V1_STR}/user/",
        json = {"email": test_email, "password": test_password, "name": test_name, "tel": test_tel}
    )
    data = r.json()
    assert r.status_code == status_code
    assert data["message"] == expected_message


def test_login(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.password()
    tel = random_phone_number()
    name = fake.name()
    user_in = UserCreate(name=name, email=email, password=password, tel=tel)
    crud.user.create(db, obj_in=user_in)

    r = client.post(
        f"{settings.API_V1_STR}/user/login", json={"email": email, "password": password}
    )
    rval = r.json()
    print(rval)
    assert "data" in rval
    _user = rval["data"]
    assert _user["email"] == email
    assert _user["name"] == name

    password2 = fake.name()
    r = client.post(
        f"{settings.API_V1_STR}/user/login", json={"email": email, "password": password2}
    )
    rval = r.json()

    assert r.status_code == 422
    assert rval["message"] == "Invalid username/password"


def test_enable_disable(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.password()
    tel = random_phone_number()
    name = fake.name()
    user_in = UserCreate(name=name, email=email, password=password, tel=tel)
    _user = crud.user.create(db, obj_in=user_in)

    r = client.put(
        f"{settings.API_V1_STR}/user/{_user.id}/disable"
    )
    assert r.status_code == 200

    r = client.put(
        f"{settings.API_V1_STR}/user/0/disable"
    )
    data = r.json()
    assert data["message"] == "Invalid user specified"

    r = client.put(
        f"{settings.API_V1_STR}/user/{_user.id}/enable"
    )
    assert r.status_code == 200

    r = client.put(
        f"{settings.API_V1_STR}/user/0/enable"
    )
    data = r.json()
    assert data["message"] == "Invalid user specified"


def test_passwords(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.name()
    tel = random_phone_number()
    name = fake.name()
    user_in = UserCreate(name=name, email=email, password=password, tel=tel)
    _user = crud.user.create(db, obj_in=user_in)

    r = client.put(
        f"{settings.API_V1_STR}/user/0/password", json={"password": fake.name()}
    )
    assert r.status_code == 404
    assert r.json()["message"] == "Invalid user specified"

    r = client.put(
        f"{settings.API_V1_STR}/user/{_user.id}/password", json={"password": fake.name()}
    )
    assert r.status_code == 422
    assert r.json()["message"] == "Password not complex enough. Should be a minimum of 8 characters long, with one uppercase letter, one digit and one special character"

    r = client.put(
        f"{settings.API_V1_STR}/user/{_user.id}/password", json={"password": fake.password()}
    )
    assert r.status_code == 200


def test_update_user(
    client: TestClient, db: Session
) -> None:
    email = fake.email()
    password = fake.password()
    tel = random_phone_number()
    name = fake.name()
    user_in = UserCreate(name=name, email=email, password=password, tel=tel)
    _user = crud.user.create(db, obj_in=user_in)

    email2 = fake.email()
    password2 = fake.password()
    tel2 = random_phone_number()
    name2 = fake.name()

    r = client.put(
        f"{settings.API_V1_STR}/user/0",
        json = {"email": email2, "password": password2, "name": name2, "tel": tel2}
    )
    assert r.status_code == 404
    assert r.json()["message"] == "Invalid user specified"

    r = client.put(
        f"{settings.API_V1_STR}/user/0",
        json = {"email": email2, "password": password2, "name": name2, "tel": name2}
    )
    assert r.status_code == 422
    assert r.json()["message"] == "The telephone number provided is invalid"

    r = client.put(
        f"{settings.API_V1_STR}/user/{_user.id}",
        json = {"email": email2, "password": password2, "name": name2, "tel": tel2}
    )
    assert r.status_code == 200
    data = r.json()["data"]
    assert data["email"] == email2
    assert data["name"] == name2
    assert data["tel"] == tel2
